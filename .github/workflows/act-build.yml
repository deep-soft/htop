# 2023-12-28 09:00
#
#
name: act-build

#on: [ push, pull_request, workflow_dispatch ]
on:
  workflow_dispatch:

env:
  # Enable format attributes in ncurses headers
  # Enable fortified memory/string handling
  CPPFLAGS: -DGCC_PRINTF -DGCC_SCANF -D_FORTIFY_SOURCE=2
  PROG_NAME:    'htop'
  PROG_VERSION: '2.2.0'
  TAG_NAME:     'htop'
  TAG_VERSION:  '2.2.0'

jobs:
  ubuntu-20-minimal-gcc:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: deep-soft/checkout@v4

    - name: Get version, set ARC_NAME
      shell: bash
      run: |
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "-" '{print $1}' | awk -F " " '{print $2}' | tr -d "[");
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk '{print $2}' | awk -F "]" '{print $1}' | tr -d "[" | tr -d "\-dev")
        PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "," '{print $2}' | awk -F "]" '{print $1}' | tr -d "[")
        echo "PROG_VERSION=$PROG_VERSION" >> $GITHUB_ENV
        echo "TAG_VERSION=$PROG_VERSION"  >> $GITHUB_ENV
        add_to_name="gcc-minimal";
        arc_name="${{ env.PROG_NAME }}-$PROG_VERSION-$add_to_name";
        echo "ARC_NAME=$arc_name" >> $GITHUB_ENV;

    - name: Install Dependencies
      run: sudo apt-get install --no-install-recommends libncursesw5-dev

    - name: Bootstrap
      run: ./autogen.sh

    - name: Configure
      run: ./configure --enable-werror --enable-affinity --disable-unicode --disable-sensors || (cat config.log; exit 1)

    - name: Enable compatibility modes
      run: |
        sed -i 's/#define HAVE_FSTATAT 1/#undef HAVE_FSTATAT/g' config.h
        sed -i 's/#define HAVE_OPENAT 1/#undef HAVE_OPENAT/g' config.h
        sed -i 's/#define HAVE_READLINKAT 1/#undef HAVE_READLINKAT/g' config.h

    - name: Build
      run: make -k

# zip release begin
    - name: Prepare files for Zip Archive Release
      run: |
        mkdir _release_
        cp htop     _release_ || true;
        cp readme   _release_ || true;

    - name: Create Zip Archive Release
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: '${{ env.ARC_NAME }}.zip'
        directory: '_release_'
        exclusions: ''
        recursive_exclusions: ''
        path: '.'
        env_variable: 'ZIP_RELEASE_ARCHIVE'
      # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

    - name: Publish
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}-${{ env.TAG_VERSION }}
        files: |
          ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-werror --enable-affinity --disable-unicode --disable-sensors"

  ubuntu-20-full-featured-gcc:
    runs-on: ubuntu-20.04
    # Enable LTO, might trigger additional warnings on advanced inlining
    env:
      CFLAGS: -O3 -g -flto
      LDFLAGS: -O3 -g -flto -Wl,--as-needed
    steps:
    - name: Checkout
      uses: deep-soft/checkout@v4

    - name: Get version, set ARC_NAME
      shell: bash
      run: |
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "-" '{print $1}' | awk -F " " '{print $2}' | tr -d "[");
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk '{print $2}' | awk -F "]" '{print $1}' | tr -d "[" | tr -d "\-dev")
        PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "," '{print $2}' | awk -F "]" '{print $1}' | tr -d "[")
        echo "PROG_VERSION=$PROG_VERSION" >> $GITHUB_ENV
        echo "TAG_VERSION=$PROG_VERSION"  >> $GITHUB_ENV
        add_to_name="gcc-full";
        arc_name="${{ env.PROG_NAME }}-$PROG_VERSION-$add_to_name";
        echo "ARC_NAME=$arc_name" >> $GITHUB_ENV;

    - name: Install Dependencies
      run: sudo apt-get install --no-install-recommends libncursesw5-dev libhwloc-dev libnl-3-dev libnl-genl-3-dev libsensors4-dev libcap-dev

    - name: Bootstrap
      run: ./autogen.sh

    - name: Configure
      run: ./configure --enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-delayacct --enable-sensors --enable-capabilities || ( cat config.log; exit 1; )

    - name: Build
      run: make -k

# zip release begin
    - name: Prepare files for Zip Archive Release
      run: |
        mkdir _release_
        cp htop     _release_ || true;
        cp readme   _release_ || true;

    - name: Create Zip Archive Release
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: '${{ env.ARC_NAME }}.zip'
        directory: '_release_'
        exclusions: ''
        recursive_exclusions: ''
        path: '.'
        env_variable: 'ZIP_RELEASE_ARCHIVE'
      # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

    - name: Publish
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}-${{ env.TAG_VERSION }}
        files: |
          ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS='--enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-delayacct --enable-sensors --enable-capabilities'

# zip release begin
    - name: Create Zip Archive Release - ALL
      if: ${{ inputs.CreateZipAll }}
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: '${{ env.ARC_NAME }}-ALL.zip'
        directory: '.'
        exclusions: ''
        recursive_exclusions: ''
        path: '.'
        env_variable: 'ZIP_RELEASE_ARCHIVE_ALL'
      # archive name is ${{ env.ZIP_RELEASE_ARCHIVE_ALL }}

    - name: Publish
      if: ${{ inputs.CreateZipAll }}
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}-ALL
        files: |
          ${{ env.ZIP_RELEASE_ARCHIVE_ALL }}
# zip release end

  ubuntu-20-gcc-static:
    runs-on: ubuntu-20.04
    # Enable LTO, might trigger additional warnings on advanced inlining
    env:
      CFLAGS: -O3 -g -flto
      LDFLAGS: -O3 -g -flto
    steps:
    - name: Checkout
      uses: deep-soft/checkout@v4

    - name: Get version, set ARC_NAME
      shell: bash
      run: |
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "-" '{print $1}' | awk -F " " '{print $2}' | tr -d "[");
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk '{print $2}' | awk -F "]" '{print $1}' | tr -d "[" | tr -d "\-dev")
        PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "," '{print $2}' | awk -F "]" '{print $1}' | tr -d "[")
        echo "PROG_VERSION=$PROG_VERSION" >> $GITHUB_ENV
        echo "TAG_VERSION=$PROG_VERSION"  >> $GITHUB_ENV
        add_to_name="gcc-static";
        arc_name="${{ env.PROG_NAME }}-$PROG_VERSION-$add_to_name";
        echo "ARC_NAME=$arc_name" >> $GITHUB_ENV;

    - name: Install Dependencies
      run: sudo apt-get install --no-install-recommends libncursesw5-dev libtinfo-dev libgpm-dev libsensors4-dev libcap-dev

    - name: Bootstrap
      run: ./autogen.sh

    - name: Configure
      run: ./configure --enable-static --enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --disable-hwloc --disable-delayacct --enable-sensors --enable-capabilities || ( cat config.log; exit 1; )

    - name: Build
      run: make -k

# zip release begin
    - name: Prepare files for Zip Archive Release
      run: |
        mkdir _release_
        cp htop     _release_ || true;
        cp readme   _release_ || true;

    - name: Create Zip Archive Release
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: '${{ env.ARC_NAME }}.zip'
        directory: '_release_'
        exclusions: ''
        recursive_exclusions: ''
        path: '.'
        env_variable: 'ZIP_RELEASE_ARCHIVE'
      # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

    - name: Publish
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}-${{ env.TAG_VERSION }}
        files: |
          ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS='--enable-static --enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --disable-hwloc --disable-delayacct --enable-sensors --enable-capabilities'

  macos-latest-clang:
    runs-on: macOS-latest
    env:
      CC: clang
    steps:
    - name: Checkout
      uses: deep-soft/checkout@v4

    - name: Get version, set ARC_NAME
      shell: bash
      run: |
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "-" '{print $1}' | awk -F " " '{print $2}' | tr -d "[");
        #PROG_VERSION=$(grep AC_INIT configure.ac  | awk '{print $2}' | awk -F "]" '{print $1}' | tr -d "[" | tr -d "\-dev")
        PROG_VERSION=$(grep AC_INIT configure.ac  | awk -F "," '{print $2}' | awk -F "]" '{print $1}' | tr -d "[")
        echo "PROG_VERSION=$PROG_VERSION" >> $GITHUB_ENV
        echo "TAG_VERSION=$PROG_VERSION"  >> $GITHUB_ENV
        add_to_name="macOS";
        arc_name="${{ env.PROG_NAME }}-$PROG_VERSION-$add_to_name";
        echo "ARC_NAME=$arc_name" >> $GITHUB_ENV;

    - name: Install Dependencies
      run: brew install automake pkg-config

    - name: Bootstrap
      run: ./autogen.sh

    - name: Configure
      run: ./configure --enable-werror || ( cat config.log; exit 1; )

    - name: Build
      run: make -k

# zip release begin
    - name: Prepare files for Zip Archive Release
      run: |
        mkdir _release_
        cp htop     _release_ || true;
        cp readme   _release_ || true;

    - name: Create Zip Archive Release
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: '${{ env.ARC_NAME }}.zip'
        directory: '_release_'
        exclusions: ''
        recursive_exclusions: ''
        path: '.'
        env_variable: 'ZIP_RELEASE_ARCHIVE'
      # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

    - name: Publish
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}-${{ env.TAG_VERSION }}
        files: |
          ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-werror"
